#loading in the libraries we will use
library(tidyverse)
library(lessR)
library(readxl)
#open data
climate_data <- read_xlsx("Lecture Practice/Global Climate Anomalies.xlsx", sheet="fall_2024")
climate_data
View(climate_data)
head(climate_data)
head(climate_data, 20)
tail(climate_data, 20)
tail(climate_data)
head(climate_data)
# Population
mean(filter(climate_data, era=="Historical")$Annual_Anom_J_D)
sd(filter(climate_data, era=="Historical")$Annual_Anom_J_D)
anthropocene <- filter(climate_data, era=="Anthropocene")$Annual_Anom_J_D
anthropocene
View(climate_data)
z.test(x=anthropocene,
mu=-18.52475,
alternative = "greater",
sigma.x = 21.09767)
library(BSDA)
z.test(x=anthropocene,
mu=-18.52475,
alternative = "greater",
sigma.x = 21.09767)
Historical <- filter(climate_data, era=="Historical")$Annual_Anom_J_D
mean(filter(climate_data, era=="Base Population")$Annual_Anom_J_D)
sd(filter(climate_data, era=="Base Population")$Annual_Anom_J_D)
z.test(x=Historical,
mu=53.8,
alternative = "two.sided",
sigma.x = 22.63869)
# Required libraries
library(ggplot2)
library(dplyr)
# Perform z-test for Historical data
Historical <- filter(climate_data, era == "Historical")$Annual_Anom_J_D
mu_0 <- 53.8
sigma_0 <- 22.63869
n <- length(Historical)
sample_mean <- mean(Historical)
# Calculate z-test statistic
z_score <- (sample_mean - mu_0) / (sigma_0 / sqrt(n))
# Create a data frame for the standard normal distribution
x_vals <- seq(-4, 4, length = 1000)
y_vals <- dnorm(x_vals)
# Plotting the normal distribution with critical regions and z-score
ggplot(data = data.frame(x = x_vals, y = y_vals), aes(x = x, y = y)) +
geom_line(color = "blue") +
# Shade critical regions
geom_area(data = subset(data.frame(x = x_vals, y = y_vals), x < -1.96), aes(x = x, y = y), fill = "red", alpha = 0.3) +
geom_area(data = subset(data.frame(x = x_vals, y = y_vals), x > 1.96), aes(x = x, y = y), fill = "red", alpha = 0.3) +
# Mark the calculated z-score on the plot
geom_vline(xintercept = z_score, color = "darkgreen", linetype = "dashed", size = 1) +
# Add labels
labs(title = "Z-Test: Historical Data",
subtitle = paste("Z-Score =", round(z_score, 2)),
x = "Z Value",
y = "Density") +
# Annotate the z-score location
annotate("text", x = z_score, y = 0.1, label = paste("Z =", round(z_score, 2)), color = "darkgreen", vjust = -1) +
# Customize theme
theme_minimal()
z.test(x=Historical,
mu=53.8,
alternative = "two.sided",
sigma.x = 22.63869)
z.test(x=Historical,
mu=53.8, sigma.x = 22.63869,
alternative = "two.sided"
)
pnorm(1.64)
1-pnorm(1.64)
remotes::install_github("yihui/xaringan")
y
setwd("C:/Users/gutif/Downloads")
devtools::install_github('nhs-r-community/NHSRtheme')
library(NHSRtheme)
library(knitr)
library(tidyverse)
library(nhsrtheme)
devtools::install_github('nhs-r-community/NHSRtheme')
devtools::install_github('nhs-r-community/NHSRtheme', force = TRUE)
library(NHSRtheme)
library(knitr)
library(tidyverse)
library(nhsrtheme)
library(icons)
library(fontawesome)
library(xaringanExtra)
remotes::install_github('yihui/xaringan')
install.packages('xfun)
install.packages('xfun')
install.packages('xfun')
library(xaringan)
br
library(xfun)
install.packages('htmltools')
library(htmltools)
remotes::install_github('yihui/xaringan', dependencies = TRUE)
remotes::install_github('yihui/xaringan', dependencies = TRUE, force=TRUE)
library(xaringan)
install.packages('fastmap')
library(fastmap)
devtools::install_github('nhs-r-community/NHSRtheme')
setwd("C:/Users/pgutierr/Downloads")
setwd("C:/Users/pgutierr/Downloads")
library(xaringanthemer)
library(xaringanthemer)
install.packages("pagedown")
library(readxl)
df <- read_xlsx('Lecturer Practice/Indep_remediated.xlsx')
df
stream_data <- read_csv("waterdata.csv")
library(tidyverse)
library(lessR)
library(readxl)
library(BSDA)
stream_data <- read_csv("waterdata.csv")
stream_data <- read_csv("Lecturer Practice/waterdata.csv")
stream_data <- read_csv("Lecturer Practice/waterdata.csv")
setwd("C:/Users/gutif/OneDrive - University of Vermont/Curriculum/07_ Cursos/Stats_Grad/Module 7&8 Independet and Dependent t-test")
stream_data <- read_csv("Lecturer Practice/waterdata.csv")
stream_data <- read_csv("Lecturer Practice/waterdata.csv")
No code for this one!
No code for this one!
stream_data
stream_data <- read_csv("Lecturer Practice/waterdata.csv")
pivot(stream_data, c(IQR, skew, kurtosis, mean, sd, var), depth_cm)
ggplot(stream_data, aes(x = depth_cm, fill = waterbody)) + geom_density()
ggplot(stream_data, aes(x = depth_cm, fill = waterbody)) + geom_boxplot()
#Shapiro-Wilks
install.packages("RVAideMemoire")
library(RVAideMemoire)
byf.shapiro(depth_cm~waterbody, data=stream_data)
var.test(depth_cm ~ waterbody, data=stream_data)
No code for this one!
No code for this one!
# Load the data into a dataframe
stream_data <- data.frame(
waterbody = c(rep("stream1", 33), rep("stream2", 38)),
depth_cm = c(
42.6, 48.4, 46.2, 44.2, 44.4, 50.6, 49.7, 44.1, 42.8, 38.8, 41.2, 47.1, 47.2, 41.5, 42.5, 35.7, 48.2, 38.1, 45.4,
39.2, 47.6, 48.4, 44.3, 40.7, 45.5, 44.7, 49.7, 46.8, 46.7, 39.0, 45.1, 47.9, 41.7,
52.5, 56.7, 52.8, 48.1, 59.7, 50.5, 56.6, 56.0, 59.1, 61.3, 49.6, 61.3, 56.1, 55.8, 53.0, 59.8, 51.5, 53.1,
53.3, 55.8, 50.5, 55.7, 58.9, 53.3, 57.2, 52.2, 56.5, 55.4, 62.1, 58.1, 58.3, 59.7, 55.0, 59.4, 52.3, 54.8,
63.2, 60.7
)
)
# Run the t-test
t.test(depth_cm ~ waterbody,
data = stream_data,
alternative = "two.sided",
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
# Run the t-test
t.test(depth_cm ~ waterbody,
data = stream_data,
alternative = "two.sided",
var.equal = TRUE,
conf.level = 0.95)
df <- read_csv('Lecturer Practice/waterdata.csv')
library(readxl)
df <- read_csv('Lecturer Practice/waterdata.csv')
df <- read.csv('Lecturer Practice/waterdata.csv')
setwd("C:/Users/pgutierr/OneDrive - University of Vermont/Curriculum/07_ Cursos/Stats_Grad/Module 7&8 Independet and Dependent t-test")
df <- read.csv('Lecturer Practice/waterdata.csv')
df
t.test(depth_cm ~ waterbody, data=stream_data,
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
stream_data <- read.csv('Lecturer Practice/waterdata.csv')
stream_data
---
```{r tx-wrangle, highlight.output = 5}
t.test(depth_cm ~ waterbody, data=stream_data,
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
t.test(depth_cm ~ waterbody, data=stream_data,
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
#Shapiro-Wilks
install.packages("RVAideMemoire")
install.packages("RVAideMemoire")
byf.shapiro(depth_cm~waterbody, data=stream_data)
#Shapiro-Wilks
library(RVAideMemoire)
byf.shapiro(depth_cm~waterbody, data=stream_data)
#var.test
var.test(depth_cm ~ waterbody, data=stream_data)
setwd("C:/Users/gutif/OneDrive - University of Vermont/Curriculum/07_ Cursos/Stats_Grad/Module 7&8 Independet and Dependent t-test")
#var.test
var.test(depth_cm ~ waterbody, data=stream_data)
stream_data <- read.csv('Lecturer Practice/two_tail_water data.csv')
byf.shapiro(depth_cm~waterbody, data=stream_data)
library(RVAideMemoire)
byf.shapiro(depth_cm~waterbody, data=stream_data)
#var.test
var.test(depth_cm ~ waterbody, data=stream_data)
t.test(depth_cm ~ waterbody, data=stream_data,
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
stream_data
t.test(depth_cm ~ waterbody, data=stream_data,
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
t.test(as.numeric(depth_cm) ~ waterbody, data=stream_data,
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
t.test(depth_cm ~ waterbody, data=stream_data,
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
stream_data <- read.csv('Lecturer Practice/two_tail_water data.csv')
head(stream_data)
t.test(depth_cm ~ waterbody, data=stream_data,
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
stats::t.test(depth_cm ~ waterbody, data=stream_data,
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
# Sample data
df <- data.frame(
id = rep(1:10, 2), # IDs for pairing
group = rep(c("Before", "After"), each = 10),
value = c(rnorm(10, mean = 50), rnorm(10, mean = 55))
)
# Paired t-test
t.test(df$value[df$group == "Before"], df$value[df$group == "After"], paired = TRUE, alternative = "two.sided")
t.test(depth_cm ~ waterbody, data=stream_data,
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
depth_cm
stream_data
t.test(stream_data$stream1,stream_data$stream2,
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
df
stream_data
t.test(stream_data$depth_cm[stream_data$waterbody == "stream1"],
stream_data$depth_cm[stream_data$waterbody == "stream1"],
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
t.test(stream_data$depth_cm[stream_data$waterbody == "stream1"],
stream_data$depth_cm[stream_data$waterbody == "stream2"],
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
t.test(depth_cm ~ waterbody, data=stream_data,
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
t.test(depth_cm ~ waterbody, data = na.omit(stream_data),
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
t.test(depth_cm ~ waterbody, data = na.omit(stream_data),
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
t.test(stream1 , stream1, data=stream_data,
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
t.test(stream1 , stream2, data=stream_data,
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
stream_data
stream_data
View(stream_data)
t.test(filter(stream_data,waterbody=="stream1")$depth_cm,
filter(stream_data,waterbody=="stream2")$depth_cm,
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
t.test(filter(stream_data, waterbody=="stream1")$depth_cm,
filter(stream_data, waterbody=="stream2")$depth_cm,
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
stream_data
t.test(filter(stream_data,waterbody=="stream1")$depth_cm,
filter(stream_data,waterbody=="stream2")$depth_cm,
alternative = "two.sided",
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
stream_data
filter(stream_data,waterbody=="stream1")$depth_cm
t.test(stream_data$depth_cm[stream_data$waterbody == "stream1"],
stream_data$depth_cm[stream_data$waterbody == "stream2"],
alternative = c("two.sided"),
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
filter(stream_data,waterbody=="stream1")$depth_cm
t.test(filter(stream_data, waterbody == "stream1")$depth_cm,
filter(stream_data, waterbody == "stream2")$depth_cm,
alternative = "two.sided",
mu = 0,
paired = FALSE,
var.equal = TRUE,
conf.level = 0.95)
install.packages('lsr)
install.packages('lsr')
# Perform t-test
t_test_result <- t.test(depth_cm ~ waterbody, data = data)
# Calculate means
mean_stream1 <- mean(stream_data$depth_cm[stream_data$waterbody == "stream1"])
stream_data <- read.csv('Lecturer Practice/two_tail_water data.csv')
setwd("C:/Users/pgutierr/OneDrive - University of Vermont/Curriculum/07_ Cursos/Stats_Grad/Module 7&8 Independet and Dependent t-test")
stream_data <- read.csv('Lecturer Practice/two_tail_water data.csv')
# Calculate means
mean_stream1 <- mean(stream_data$depth_cm[stream_data$waterbody == "stream1"])
mean_stream2 <- mean(stream_data$depth_cm[stream_data$waterbody == "stream2"])
# Calculate standard deviations
sd_stream1 <- sd(stream_data$depth_cm[stream_data$waterbody == "stream1"])
sd_stream2 <- sd(stream_data$depth_cm[stream_data$waterbody == "stream2"])
# Calculate sample sizes
n1 <- sum(stream_data$waterbody == "stream1")
n2 <- sum(stream_data$waterbody == "stream2")
# Calculate pooled standard deviation
pooled_sd <- sqrt(((n1 - 1) * sd_stream1^2 + (n2 - 1) * sd_stream2^2) / (n1 + n2 - 2))
# Calculate Cohen's d
cohens_d <- (mean_stream2 - mean_stream1) / pooled_sd
# Output results
t_test_result
# Perform t-test
t_test_result <- t.test(depth_cm ~ waterbody, data = data)
# Perform t-test
t_test_result <- t.test(depth_cm ~ waterbody, data = stream_data)
cat("Cohen's d:", cohens_d)
cohensD(depth_cm ~ waterbody, data=stream_data)
# Create a data frame with your data
data <- data.frame(
population = rep(c("population_one", "population_two"),
times = c(40, 40)),
fish_in_stomach = c(
7, 3, 3, 2, 2, 3, 1, 5, 5, 3, 2, 6, 2, 6, 1, 5, 5, 2, 4, 0,
2, 2, 0, 2, 3, 1, 0, 5, 5, 3, 3, 6, 3, 1, 3, 2, 1, 7, 5, 3,
4, 2, 5, 5, 4, 6, 3, 7, 8, 7, 7, 4, 5, 6, -1, 0, 5, 5, 8,
12, 1, 10, 3, -2, 6, 6, 8, 3, 6, 8, 11, 2, 5, 7, 8, 6, 9,
4, 6, 13, 11, 4, 12, 6, 3, 7, 0, 2, 9, 8, 8
)
)
# Create a sample size vector
sample_size <- 1:30
# Calculate degrees of freedom (n - 1)
degrees_of_freedom <- sample_size - 1
# Create a data frame
df_data <- data.frame(sample_size, degrees_of_freedom)
# Generate the plot
ggplot(df_data, aes(x = sample_size, y = degrees_of_freedom)) +
geom_line(color = "#0073C2FF", size = 1) +
geom_point(color = "#D55E00", size = 3) +
labs(title = "Understanding Degrees of Freedom",
x = "Sample Size (n)",
y = "Degrees of Freedom (DF)") +
theme_minimal() +
geom_text(aes(label = degrees_of_freedom), vjust = -1, size = 3) +
annotate("text", x = 15, y = 25, label = "DF = n - 1", size = 4, color = "black")
library(ggplot2)
# Create a sample size vector
sample_size <- 1:30
# Calculate degrees of freedom (n - 1)
degrees_of_freedom <- sample_size - 1
# Create a data frame
df_data <- data.frame(sample_size, degrees_of_freedom)
# Generate the plot
ggplot(df_data, aes(x = sample_size, y = degrees_of_freedom)) +
geom_line(color = "#0073C2FF", size = 1) +
geom_point(color = "#D55E00", size = 3) +
labs(title = "Understanding Degrees of Freedom",
x = "Sample Size (n)",
y = "Degrees of Freedom (DF)") +
theme_minimal() +
geom_text(aes(label = degrees_of_freedom), vjust = -1, size = 3) +
annotate("text", x = 15, y = 25, label = "DF = n - 1", size = 4, color = "black")
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Set parameters for the t-test
df <- 29
alpha <- 0.05
critical_value <- qt(1 - alpha / 2, df)  # for two-tailed test
# Create a sequence of t-values
t_values <- seq(-4, 4, length.out = 1000)
# Calculate the density of the t-distribution
t_density <- dt(t_values, df)
# Create a data frame for plotting
t_data <- data.frame(t_values, t_density)
# Create the ggplot
ggplot(t_data, aes(x = t_values, y = t_density)) +
geom_line(size = 1) +  # t-distribution line
geom_area(data = filter(t_data, t_values <= -critical_value | t_values >= critical_value),
aes(y = t_density), fill = "red", alpha = 0.5) +  # rejection area
geom_vline(xintercept = c(-critical_value, critical_value),
linetype = "dashed", color = "blue", size = 1) +  # critical value lines
labs(title = "T-Distribution with Rejection Areas",
x = "T-Value",
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Set parameters for the t-test
df <- 29
alpha <- 0.05
critical_value <- qt(1 - alpha / 2, df)  # for two-tailed test
# Create a sequence of t-values
t_values <- seq(-4, 4, length.out = 1000)
# Calculate the density of the t-distribution
t_density <- dt(t_values, df)
# Create a data frame for plotting
t_data <- data.frame(t_values, t_density)
# Create the ggplot
ggplot(t_data, aes(x = t_values, y = t_density)) +
geom_line(size = 1) +  # t-distribution line
geom_area(data = filter(t_data, t_values <= -critical_value),
aes(y = t_density), fill = "red", alpha = 0.5) +  # left rejection area
geom_area(data = filter(t_data, t_values >= critical_value),
aes(y = t_density), fill = "red", alpha = 0.5) +  # right rejection area
geom_vline(xintercept = c(-critical_value, critical_value),
linetype = "dashed", color = "blue", size = 1) +  # critical value lines
labs(title = "T-Distribution with Rejection Areas",
x = "T-Value",
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Set parameters for the t-test
df <- 29
alpha <- 0.05
critical_value <- qt(1 - alpha / 2, df)  # for two-tailed test
# Create a sequence of t-values
t_values <- seq(-4, 4, length.out = 1000)
# Calculate the density of the t-distribution
t_density <- dt(t_values, df)
# Create a data frame for plotting
t_data <- data.frame(t_values, t_density)
# Create the ggplot
ggplot(t_data, aes(x = t_values, y = t_density)) +
geom_line(size = 1) +  # t-distribution line
geom_area(data = filter(t_data, t_values <= -critical_value),
aes(y = t_density), fill = "red", alpha = 0.5) +  # left rejection area
geom_area(data = filter(t_data, t_values >= critical_value),
aes(y = t_density), fill = "red", alpha = 0.5) +  # right rejection area
geom_vline(xintercept = c(-critical_value, critical_value),
linetype = "dashed", color = "blue", size = 1) +  # critical value lines
labs(title = "T-Distribution with Rejection Areas",
x = "T-Value",
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
